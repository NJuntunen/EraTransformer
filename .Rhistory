EraTransformer(train_rec, train, params = transformer_params(nthreads = 4))
devtools::load_all()
EraTransformer(train_rec, train, params = transformer_params(nthreads = 4))
EraTransformer(train_rec, train, params = transformer_params(nthreads = 4))
devtools::load_all()
(train_rec, train, params = transformer_params(nthreads = 4))
EraTransformer(train_rec, train, params = transformer_params(nthreads = 4))
n
EraTransformer(train_rec, train, params = transformer_params(nthreads = 4))
EraTransformer(train_rec, train, params = transformer_params(nthreads = 4))
devtools::load_all()
EraTransformer(train_rec, train, params = transformer_params(nthreads = 4))
devtools::load_all()
model <- EraTransformer(train_rec, train, params = transformer_params(nthreads = 4))
devtools::load_all()
model <- EraTransformer(train_rec, train, params = transformer_params(nthreads = 4))
model$blueprint
model
model$coefs
devtools::load_all()
model <- EraTransformer(train_rec, train, params = transformer_params(nthreads = 4, epochs = 2))
model <- EraTransformer(train_rec, train, params = transformer_params(nthreads = 4, epochs = 2))
params
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2)
model <- EraTransformer(train_rec, train, epochs = 2)
list(...)
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2)
dots
dots[param]
dots[[param]]
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2)
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
EraTransformer()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
library(EraTransformer)
pacman::p_load(qs, apila, tidymodels, tidyverse, foreach, iterators, tidytable, torch, future, furrr, EraTransformer)
data <- qread(file.path(get_apila_repo_path(),"Slices", "Set65", "model-Slice01.rds"))
training <- training(data) %>% ungroup
train <- exclude_targets_from_data(target_col = "target_1", data = training) %>%
filter_tails(target = "target_1", tail = 0.2) %>%
ungroup
train <- train %>%
select(date, Id, contains('target'), 3:50)
train_rec <- recipe(train %>% dplyr::slice(0)) %>%
update_role(everything()) %>%
update_role("target_1", new_role = "outcome") %>%
update_role('Id', new_role = "ID") %>%
update_role('date', new_role = "date") %>%
step_nzv(all_numeric_predictors()) %>%
step_impute_median(all_numeric_predictors())
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
pacman::p_load(qs, apila, tidymodels, tidyverse, foreach, iterators, tidytable, torch, future, furrr, EraTransformer)
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
params
devtools::load_all()
devtools::load_all()
devtools::load_all()
unregister_dopar <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
pacman::p_load(qs, apila, tidymodels, tidyverse, foreach, iterators, tidytable, torch, future, furrr, EraTransformer)
data <- qread(file.path(get_apila_repo_path(),"Slices", "Set65", "model-Slice01.rds"))
training <- training(data) %>% ungroup
train <- exclude_targets_from_data(target_col = "target_1", data = training) %>%
filter_tails(target = "target_1", tail = 0.2) %>%
ungroup
train <- train %>%
select(date, Id, contains('target'), 3:50)
train_rec <- recipe(train %>% dplyr::slice(0)) %>%
update_role(everything()) %>%
update_role("target_1", new_role = "outcome") %>%
update_role('Id', new_role = "ID") %>%
update_role('date', new_role = "date") %>%
step_nzv(all_numeric_predictors()) %>%
step_impute_median(all_numeric_predictors())
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
unregister_dopar <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
unregister_dopar()
furrr_options()
?furrr_options()
devtools::load_all()
devtools::load_all()
pacman::p_load(qs, apila, tidymodels, tidyverse, foreach, iterators, tidytable, torch, future, furrr, EraTransformer)
data <- qread(file.path(get_apila_repo_path(),"Slices", "Set65", "model-Slice01.rds"))
training <- training(data) %>% ungroup
train <- exclude_targets_from_data(target_col = "target_1", data = training) %>%
filter_tails(target = "target_1", tail = 0.2) %>%
ungroup
train <- train %>%
select(date, Id, contains('target'), 3:50)
train_rec <- recipe(train %>% dplyr::slice(0)) %>%
update_role(everything()) %>%
update_role("target_1", new_role = "outcome") %>%
update_role('Id', new_role = "ID") %>%
update_role('date', new_role = "date") %>%
step_nzv(all_numeric_predictors()) %>%
step_impute_median(all_numeric_predictors())
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
pacman::p_load(qs, apila, tidymodels, tidyverse, foreach, iterators, tidytable, torch, future, furrr, EraTransformer)
data <- qread(file.path(get_apila_repo_path(),"Slices", "Set65", "model-Slice01.rds"))
training <- training(data) %>% ungroup
train <- exclude_targets_from_data(target_col = "target_1", data = training) %>%
filter_tails(target = "target_1", tail = 0.2) %>%
ungroup
train <- train %>%
select(date, Id, contains('target'), 3:50)
train_rec <- recipe(train %>% dplyr::slice(0)) %>%
update_role(everything()) %>%
update_role("target_1", new_role = "outcome") %>%
update_role('Id', new_role = "ID") %>%
update_role('date', new_role = "date") %>%
step_nzv(all_numeric_predictors()) %>%
step_impute_median(all_numeric_predictors())
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1)
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1)
era2data
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
era2data
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 4)
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1)
transformer
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1)
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1)
devtools::load_all()
model
predict(model, train)
predict(model, train)
predictors
model
predictors
names(predictors)
class(predictors)
predictors %>% as_tibble()
predictors %>% as_tibble() %>% select(contains("date"))
model$blueprint
devtools::load_all()
predict(model, train)
forged
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1)
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cpu")
model
predict(model, train)
predict(model, train)
data
class(data)
predict(model, train)
df
params$nthreads
predict(model, train)
as.matrix(data[pred_names]
)
as.matrix(data[pred_names])
data
inputs
predict(model, train)
input
params$max_len
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cpu")
pacman::p_load(qs, apila, tidymodels, tidyverse, foreach, iterators, tidytable, torch, future, furrr, EraTransformer)
data <- qread(file.path(get_apila_repo_path(),"Slices", "Set65", "model-Slice01.rds"))
training <- training(data) %>% ungroup
train <- exclude_targets_from_data(target_col = "target_1", data = training) %>%
filter_tails(target = "target_1", tail = 0.2) %>%
ungroup
train <- train %>%
select(date, Id, contains('target'), 3:50)
train_rec <- recipe(train %>% dplyr::slice(0)) %>%
update_role(everything()) %>%
update_role("target_1", new_role = "outcome") %>%
update_role('Id', new_role = "ID") %>%
update_role('date', new_role = "date") %>%
step_nzv(all_numeric_predictors()) %>%
step_impute_median(all_numeric_predictors())
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cpu")
df
input
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cpu")
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cpu")
predict(model, train)
model
inputs
pad_len
dim(input)
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cpu")
predict(model, train)
predict(model, train)
era
devtools::load_all()
predict(model, train)
data
inputs
input
params$padding_value
pad_len
input
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cpu")
predict(model, train)
predict(model, train)
df
data
inputs
predict(model, train)
inputs
devtools::load_all()
devtools::load_all()
predict(model, train)
predict(model, train)
data %>%
group_by(date) %>%
group_split()
data <- data %>%
group_by(date) %>%
group_split()
preds <- list()
era in 1:length(data)
1:length(data)
era <- 1
inputs <- torch::torch_tensor(as.matrix(data[[era]][pred_names]), dtype = torch::torch_int())
inputs
pad_inputs <- pad_sequence(list(inputs), model$params)
padded_inputs <- pad_inputs[[1]]$to(device=torch_device(model$params$device))
padded_masks <- pad_inputs[[2]]$to(device=torch_device(model$params$device))
padded_inputs
padded_masks
model$transformer(padded_inputs/4.0, padded_masks)
model$transformer(padded_inputs/4.0, padded_masks)[1]
torch_nonzero(mask_live.view(-1))
torch_nonzero(padded_masks$view(-1))
[torch_nonzero(padded_masks$view(-1))]$squeeze(2)
[torch_nonzero(padded_masks$view(-1))]
model$transformer(padded_inputs/4.0, padded_masks)[1][torch_nonzero(padded_masks$view(-1))]
model$transformer(padded_inputs/4.0, padded_masks)[1][torch_nonzero(padded_masks$view(-1))]$squeeze(2)
model$transformer(padded_inputs/4.0, padded_masks)[1][torch_nonzero(padded_masks$view(-1))]$squeeze(2)$detach()
model$transformer(padded_inputs/4.0, padded_masks)[1][torch_nonzero(padded_masks$view(-1))]$squeeze(2)$detach()$cpu()
testi <- model$transformer(padded_inputs/4.0, padded_masks)[1][torch_nonzero(padded_masks$view(-1))]$squeeze(2)$detach()$cpu()
testi
as_array(model$transformer(padded_inputs/4.0, padded_masks)[1][torch_nonzero(padded_masks$view(-1))]$squeeze(2)$cpu())
for (era in 1:length(data)) {
inputs <- torch::torch_tensor(as.matrix(data[[era]][pred_names]), dtype = torch::torch_int())
pad_inputs <- pad_sequence(list(inputs), model$params)
padded_inputs <- pad_inputs[[1]]$to(device=torch_device(model$params$device))
padded_masks <- pad_inputs[[2]]$to(device=torch_device(model$params$device))
outputs <- as_array(model$transformer(padded_inputs/4.0, padded_masks)[1][torch_nonzero(padded_masks$view(-1))]$squeeze(2)$cpu())
preds[[era]] <- outputs
}
preds
preds <- list()
for (era in 1:length(data)) {
inputs <- torch::torch_tensor(as.matrix(data[[era]][pred_names]), dtype = torch::torch_int())
pad_inputs <- pad_sequence(list(inputs), model$params)
padded_inputs <- pad_inputs[[1]]$to(device=torch_device(model$params$device))
padded_masks <- pad_inputs[[2]]$to(device=torch_device(model$params$device))
outputs <- as_array(model$transformer(padded_inputs/4.0, padded_masks)[1][torch_nonzero(padded_masks$view(-1))]$squeeze(2)$cpu())
preds[[era]] <- outputs
}
devtools::load_all()
predict(model, train)
do.call(c, preds)
predictions <- do.call(c, preds)
hardhat::spruce_numeric(predictions)
devtools::load_all()
predict(model, train)
test <- testing(data) %>% ungroup
test
test <- test %>%
select(date, Id, contains('target'), 3:50)
test
test <- testing(data) %>% ungroup
test <- test %>%
select(date, Id, target_1, 3:50)
tes
test
predict(model, train)
predict(model, test)
test
predict(model, test)
data
as.matrix(data[[era]][pred_names])
inputs <- torch::torch_tensor(as.matrix(data[[era]][pred_names]), dtype = torch::torch_int())
pad_inputs <- pad_sequence(list(inputs), model$params)
inputs
predict(model, test)
input
devtools::load_all()
predict(model, test)
max_len
devtools::load_all()
predict(model, test)
max_len
devtools::load_all()
predict(model, test)
pad_len
dim(input)
params$max_len
padded_input
mask
torch_cat(list(mask, torch_zeros(c(pad_len, 1), dtype=torch_float())), dim=1)
devtools::load_all()
predict(model, test)
params$max_len
predict(model, test)
predict(model, test)
inputs
padded_inputs
masks
pad_inputs[[1]]
pad_inputs[[1]]$to(device=torch_device(model$params$device))
model$params$device
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cpu")
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cpu")
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cpu")
test <- test %>%
select(date, Id, target_1, 3:50)
predict(model, test)
names(train)
test <- testing(data) %>% ungroup
test %>%
select(names(train))
test <- test %>%
select(names(train))
predict(model, test)
model$params
predict(model, test)
devtools::load_all()
predict(model, test)
outputs
predict(model, test)
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
padded_inputs
padded_labels
masks_inputs
devtools::load_all()
test <- testing(data) %>% ungroup
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
inputs
mask
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
mask
x
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
?torch_tensor
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
params
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
params
k <- self$linear_k$forward(inputs)
q <- self$linear_q$forward(inputs)
v <- self$linear_v$forward(inputs)
n <- torch_sqrt(torch_tensor(self$dim, dtype=torch_float32(), device = torch_device(params$device)))
devtools::load_all()
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
Q
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, nthreads = 1, device = "cuda")
test <- testing(data) %>% ungroup
test <- test %>%
select(names(train))
predict(model, test)
devtools::load_all()
predict(model, test)
devtools::lao
devtools::load_all()
predict(model, test)
pacman::p_load(qs, apila, tidymodels, tidyverse, foreach, iterators, tidytable, torch, future, furrr, EraTransformer)
data <- qread(file.path(get_apila_repo_path(),"Slices", "Set65", "model-Slice01.rds"))
training <- training(data) %>% ungroup
train <- exclude_targets_from_data(target_col = "target_1", data = training) %>%
filter_tails(target = "target_1", tail = 0.2) %>%
ungroup
train_rec <- recipe(train %>% dplyr::slice(0)) %>%
update_role(everything()) %>%
update_role("target_1", new_role = "outcome") %>%
update_role('Id', new_role = "ID") %>%
update_role('date', new_role = "date") %>%
step_nzv(all_numeric_predictors()) %>%
step_impute_median(all_numeric_predictors())
model <- EraTransformer(train_rec, train, epochs = 2, device = "cuda")
model <- EraTransformer(train_rec, train, epochs = 2, device = "cuda")
df
model <- EraTransformer(train_rec, train, epochs = 2, device = "cuda")
df
as.matrix(data[pred_names])
data
data %>% select(all_of(pred_names))
as.matrix(data %>% select(all_of(pred_names))
)
inputs <- torch::torch_tensor(as.matrix(data %>% select(all_of(pred_names))), dtype = torch::torch_int(), device = torch_device(params$device))
training <- training(data) %>% ungroup
train <- exclude_targets_from_data(target_col = "target_1", data = training) %>%
filter_tails(target = "target_1", tail = 0.2) %>%
ungroup %>%
select(-c(cntry, sector))
train_rec <- recipe(train %>% dplyr::slice(0)) %>%
update_role(everything()) %>%
update_role("target_1", new_role = "outcome") %>%
update_role('Id', new_role = "ID") %>%
update_role('date', new_role = "date") %>%
step_nzv(all_numeric_predictors()) %>%
step_impute_median(all_numeric_predictors())
model <- EraTransformer(train_rec, train, epochs = 2, device = "cuda")
model <- EraTransformer(train_rec, train, epochs = 2, device = "cuda")
?torch_masked
?torch_masked_select
train_rec <- recipe(train %>% dplyr::slice(0)) %>%
update_role(everything()) %>%
update_role("target_1", new_role = "outcome") %>%
update_role('Id', new_role = "ID") %>%
update_role('date', new_role = "date") %>%
step_nzv(all_numeric_predictors())
train
model <- EraTransformer(train_rec, train, epochs = 2, device = "cuda")
gc()
library(EraTransformer)
pacman::p_load(qs, apila, tidymodels, tidyverse, foreach, iterators, tidytable, torch, future, furrr, EraTransformer)
data <- qread(file.path(get_apila_repo_path(),"Slices", "Set65", "model-Slice01.rds"))
training <- training(data) %>% ungroup
train <- exclude_targets_from_data(target_col = "target_1", data = training) %>%
filter_tails(target = "target_1", tail = 0.2) %>%
ungroup %>%
select(-c(cntry, sector))
train_rec <- recipe(train %>% dplyr::slice(0)) %>%
update_role(everything()) %>%
update_role("target_1", new_role = "outcome") %>%
update_role('Id', new_role = "ID") %>%
update_role('date', new_role = "date") %>%
step_nzv(all_numeric_predictors()) %>%
step_mutate(across(where(is.numeric), ~ifelse(is.na(.,-2,.))))
model <- EraTransformer(train_rec, train, epochs = 2, device = "cuda")
train_rec <- recipe(train %>% dplyr::slice(0)) %>%
update_role(everything()) %>%
update_role("target_1", new_role = "outcome") %>%
update_role('Id', new_role = "ID") %>%
update_role('date', new_role = "date") %>%
step_nzv(all_numeric_predictors()) %>%
step_mutate(across(where(is.numeric), ~ifelse(is.na(.),-2,.)))
model <- EraTransformer(train_rec, train, epochs = 2, device = "cuda")
qsave(model, "D:/testi_malli.rds")
qread("D:/testi_malli.rds")
tabnet:::model_to_raw
devtools::load_all()
model <- EraTransformer(train_rec, train, epochs = 2, device = "cuda")
model
test <- testing(data) %>% ungroup
test <- test %>%
select(names(train))
predict(model, test)
model$transformer
torch_load(model$transformer)
devtools::load_all()
model
predict(model, test)
devtools::load_all()
predict(model, test)
devtools::load_all()
unregister_dopar <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
predict(model, test)
model$transformer()
model$transformer
devtools::load_all()
predict(model, test)
devtools::load_all()
predict(model, test)
devtools::load_all()
predict(model, test)
predict(model, test)
qsave(model, "D:/testi_malli.rds")
model <- qread("D:/testi_malli.rds")
test <- testing(data) %>% ungroup
test <- test %>%
select(names(train))
predict(model, test)
gc()
